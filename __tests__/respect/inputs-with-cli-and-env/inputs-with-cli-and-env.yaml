arazzo: 1.0.1
info:
  title: Test inputs with CLI and env
  description: >-
    This test demonstrates how to use inputs and environment variables in an API test.
  version: 1.0.0

sourceDescriptions:
  - name: museum-api
    type: openapi
    url: museum-api.yaml
  - name: tickets-from-museum-api
    type: arazzo
    url: museum-tickets.yaml

workflows:
  - workflowId: get-museum-hours
    inputs:
      type: object
      properties:
        env:
          type: object
          properties:
            AUTH_TOKEN:
              type: string
            organizationId:
              type: string
              default: acme-inc
    description: >-
      This workflow demonstrates how to get the museum opening hours and buy tickets.
    parameters:
      - in: header
        name: Authorization
        value: $inputs.env.AUTH_TOKEN
    steps:
      - stepId: get-museum-hours
        description: >-
          Get museum hours by resolving request details with getMuseumHours operationId from museum-api.yaml description.
        operationId: museum-api.getMuseumHours
        successCriteria:
          - condition: $statusCode == 200
        outputs:
          schedule: $response.body
      - stepId: buy-ticket
        description: >-
          Buy a ticket for the museum by calling an external workflow from another Arazzo file.
        workflowId: $sourceDescriptions.tickets-from-museum-api.workflows.get-museum-tickets
        outputs:
          ticketId: $outputs.ticketId
      - stepId: test-default-input
        operationId: museum-api.getMuseumHours
        parameters:
          - in: query
            name: organizationId
            value: $inputs.env.organizationId
  - workflowId: events-crud
    inputs:
      type: object
      properties:
        env:
          type: object
          properties:
            AUTH_TOKEN:
              type: string
        username:
          type: string
        password:
          type: string
    description: >-
      This workflow demonstrates how to list, create, update, and delete special events at the museum.
    parameters:
      - in: header
        name: Authorization
        value: Basic Og==
    steps:
      - stepId: create-event
        parameters:
          - in: header
            name: username-token
            value: $inputs.env.AUTH_TOKEN
        description: >-
          Create a new special event.
        operationPath: '{$sourceDescriptions.museum-api.url}#/paths/~1special-events/post'
        requestBody:
          payload:
            additionalName: $inputs.username
            additionalPassword: $inputs.password
            additionalEnv: $inputs.env.AUTH_TOKEN
            name: 'Mermaid Treasure Identification and Analysis'
            location: 'Under the seaaa ðŸ¦€ ðŸŽ¶ ðŸŒŠ.'
            eventDescription: 'Join us as we review and classify a rare collection of 20 thingamabobs, gadgets, gizmos, whoosits, and whatsits, kindly donated by Ariel.'
            dates:
              - '2023-09-05'
              - '2023-09-08'
            price: 0
        successCriteria:
          - condition: $statusCode == 201
          - context: $response.body
            condition: $.name == 'Mermaid Treasure Identification and Analysis'
            type: jsonpath
        outputs:
          createdEventId: $response.body#/eventId
          name: $response.body#/name
